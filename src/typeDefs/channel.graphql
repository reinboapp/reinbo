type Channel {
  _id: ID

  roomId: ID

  channelname: String
  name: String
  description: String
  isPrivate: Boolean

  members: [User]

  createdAt: String
  updatedAt: String
}

input ChannelMutationInput {
  roomId: ID
  channelname: String
  name: String
  description: String
  isPrivate: Boolean
}

input ChatPagingInput {
  size: Int
  beforeId: ID
  afterId: ID
}

type Query {
  channelChats(id: ID!, paging: ChatPagingInput): [Chat!]!
}

type Mutation {
  channelCreate(input: ChannelMutationInput!): Channel!
  channelUpdate(id: ID!, input: ChannelMutationInput!): Channel!
  channelDelete(id: ID!): Boolean!

  channelJoin(id: ID!): Channel!
  channelLeave(id: ID!): Boolean!
  channelKickUser(id: ID!, userId: ID!): Boolean!
}

type Subscription {
  channelChats(id: ID!): [Chat!]!
}
